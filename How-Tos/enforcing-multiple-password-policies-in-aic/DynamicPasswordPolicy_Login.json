{
  "meta": {
    "treesSelectedForExport": [
      "DynamicPasswordPolicy_Login"
    ],
    "innerTreesIncluded": [
      "ProgressiveProfile"
    ]
  },
  "trees": {
    "ProgressiveProfile": {
      "tree": {
        "_id": "ProgressiveProfile",
        "_rev": "512701181",
        "identityResource": "managed/alpha_user",
        "uiConfig": {
          "categories": "[\"Progressive Profile\"]"
        },
        "entryNodeId": "8afdaec3-275e-4301-bb53-34f03e6a4b29",
        "innerTreeOnly": false,
        "nodes": {
          "423a959a-a1b9-498a-b0f7-596b6b6e775a": {
            "connections": {
              "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a",
              "PATCHED": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "displayName": "Patch Object",
            "nodeType": "PatchObjectNode",
            "x": 766,
            "y": 36
          },
          "8afdaec3-275e-4301-bb53-34f03e6a4b29": {
            "connections": {
              "false": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "true": "a1f45b44-5bf7-4c57-aa3f-75c619c7db8e"
            },
            "displayName": "Login Count Decision",
            "nodeType": "LoginCountDecisionNode",
            "x": 152,
            "y": 36
          },
          "a1f45b44-5bf7-4c57-aa3f-75c619c7db8e": {
            "connections": {
              "false": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "true": "a5aecad8-854a-4ed5-b719-ff6c90e858c0"
            },
            "displayName": "Query Filter Decision",
            "nodeType": "QueryFilterDecisionNode",
            "x": 357,
            "y": 36
          },
          "a5aecad8-854a-4ed5-b719-ff6c90e858c0": {
            "connections": {
              "outcome": "423a959a-a1b9-498a-b0f7-596b6b6e775a"
            },
            "displayName": "Page Node",
            "nodeType": "PageNode",
            "x": 555,
            "y": 20
          }
        },
        "description": "Prompt for missing preferences on 3rd login",
        "staticNodes": {
          "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
            "x": 802,
            "y": 312
          },
          "e301438c-0bd0-429c-ab0c-66126501069a": {
            "x": 919,
            "y": 171
          },
          "startNode": {
            "x": 50,
            "y": 58.5
          }
        },
        "mustRun": false,
        "enabled": true
      },
      "nodes": {
        "423a959a-a1b9-498a-b0f7-596b6b6e775a": {
          "_id": "423a959a-a1b9-498a-b0f7-596b6b6e775a",
          "_rev": "1288219125",
          "identityResource": "managed/alpha_user",
          "patchAsObject": false,
          "ignoredFields": [],
          "identityAttribute": "userName",
          "_type": {
            "_id": "PatchObjectNode",
            "name": "Patch Object",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "PATCHED",
              "displayName": "Patched"
            },
            {
              "id": "FAILURE",
              "displayName": "Failed"
            }
          ]
        },
        "8afdaec3-275e-4301-bb53-34f03e6a4b29": {
          "_id": "8afdaec3-275e-4301-bb53-34f03e6a4b29",
          "_rev": "-1679047423",
          "interval": "AT",
          "identityAttribute": "userName",
          "amount": 3,
          "_type": {
            "_id": "LoginCountDecisionNode",
            "name": "Login Count Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "a1f45b44-5bf7-4c57-aa3f-75c619c7db8e": {
          "_id": "a1f45b44-5bf7-4c57-aa3f-75c619c7db8e",
          "_rev": "-1852493841",
          "identityAttribute": "userName",
          "queryFilter": "!(/preferences pr) or /preferences/marketing eq false or /preferences/updates eq false",
          "_type": {
            "_id": "QueryFilterDecisionNode",
            "name": "Query Filter Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "a5aecad8-854a-4ed5-b719-ff6c90e858c0": {
          "_id": "a5aecad8-854a-4ed5-b719-ff6c90e858c0",
          "_rev": "380010937",
          "nodes": [
            {
              "_id": "0a042e10-b22e-4e02-86c4-65e26e775f7a",
              "nodeType": "AttributeCollectorNode",
              "displayName": "Attribute Collector"
            }
          ],
          "pageDescription": {},
          "pageHeader": {
            "en": "Please select your preferences"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        }
      },
      "innerNodes": {
        "0a042e10-b22e-4e02-86c4-65e26e775f7a": {
          "_id": "0a042e10-b22e-4e02-86c4-65e26e775f7a",
          "_rev": "-1210529544",
          "attributesToCollect": [
            "preferences/updates",
            "preferences/marketing"
          ],
          "identityAttribute": "userName",
          "validateInputs": false,
          "required": false,
          "_type": {
            "_id": "AttributeCollectorNode",
            "name": "Attribute Collector",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        }
      },
      "scripts": {},
      "emailTemplates": {},
      "socialIdentityProviders": {},
      "themes": [],
      "saml2Entities": {},
      "circlesOfTrust": {}
    },
    "DynamicPasswordPolicy_Login": {
      "tree": {
        "_id": "DynamicPasswordPolicy_Login",
        "_rev": "129946367",
        "identityResource": "managed/alpha_user",
        "uiConfig": {
          "categories": "[\"Authentication\"]"
        },
        "entryNodeId": "a69aee96-97d5-4ace-babf-244f19e7c7e2",
        "innerTreeOnly": false,
        "nodes": {
          "20214d5c-97ad-4bff-95ad-5f187b168ae4": {
            "x": 739,
            "y": 430,
            "connections": {
              "outcome": "f3613eef-7826-4dc4-8ba2-63b34ffc71bc"
            },
            "nodeType": "PageNode",
            "displayName": "Page Node"
          },
          "fd7d5df2-8c22-4c41-af8d-712eb7b99859": {
            "x": 1537,
            "y": 838.015625,
            "connections": {
              "outcome": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "nodeType": "AccountLockoutNode",
            "displayName": "Account Lockout"
          },
          "06d6cdd6-8feb-40ff-8a26-e04d885b92af": {
            "x": 1279,
            "y": 773.015625,
            "connections": {
              "Reject": "fd7d5df2-8c22-4c41-af8d-712eb7b99859",
              "Retry": "20214d5c-97ad-4bff-95ad-5f187b168ae4"
            },
            "nodeType": "RetryLimitDecisionNode",
            "displayName": "Retry Limit Decision"
          },
          "f3613eef-7826-4dc4-8ba2-63b34ffc71bc": {
            "x": 1010,
            "y": 436.015625,
            "connections": {
              "CANCELLED": "e301438c-0bd0-429c-ab0c-66126501069a",
              "EXPIRED": "e301438c-0bd0-429c-ab0c-66126501069a",
              "FALSE": "06d6cdd6-8feb-40ff-8a26-e04d885b92af",
              "LOCKED": "e301438c-0bd0-429c-ab0c-66126501069a",
              "TRUE": "b461af63-48f7-42f7-ad51-3ff86f6b56a9"
            },
            "nodeType": "IdentityStoreDecisionNode",
            "displayName": "Identity Store Decision"
          },
          "977023cc-65dc-4c80-9306-c777f776c555": {
            "x": 2144,
            "y": 426,
            "connections": {
              "outcome": "cb9fae34-4351-468d-84f3-b268227648c5"
            },
            "nodeType": "IncrementLoginCountNode",
            "displayName": "Increment Login Count"
          },
          "cb9fae34-4351-468d-84f3-b268227648c5": {
            "x": 2412,
            "y": 439,
            "connections": {
              "false": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "nodeType": "InnerTreeEvaluatorNode",
            "displayName": "Inner Tree Evaluator"
          },
          "a69aee96-97d5-4ace-babf-244f19e7c7e2": {
            "x": 129,
            "y": 436.515625,
            "connections": {
              "Found": "4d4a4382-b36f-48c0-98cf-fee3150d92d1",
              "Missing": "bfa2e7b5-7ea6-4941-9113-9b7fc0a5b698",
              "Error": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Get Org ID from Query Param"
          },
          "bfa2e7b5-7ea6-4941-9113-9b7fc0a5b698": {
            "x": 439,
            "y": 591.515625,
            "connections": {
              "true": "20214d5c-97ad-4bff-95ad-5f187b168ae4"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Test Password Policy"
          },
          "4d4a4382-b36f-48c0-98cf-fee3150d92d1": {
            "x": 419,
            "y": 444.515625,
            "connections": {
              "Success": "20214d5c-97ad-4bff-95ad-5f187b168ae4",
              "Error": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Get Password Policy from Org"
          },
          "b461af63-48f7-42f7-ad51-3ff86f6b56a9": {
            "x": 1299.357142857143,
            "y": 427.59375,
            "connections": {
              "Undefined": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Error": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Valid": "977023cc-65dc-4c80-9306-c777f776c555",
              "Invalid": "c2a0d85f-7043-4531-ad0a-92f30fdac521"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Evaluate Password Policy"
          },
          "c2a0d85f-7043-4531-ad0a-92f30fdac521": {
            "x": 1627.0714285714287,
            "y": 478.16517857142867,
            "connections": {
              "Invalid": "b461af63-48f7-42f7-ad51-3ff86f6b56a9",
              "Undefined": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Error": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Valid": "a00f94ff-5056-4d0e-9cde-87be3f6d18a4"
            },
            "nodeType": "PageNode",
            "displayName": "Page Node"
          },
          "a00f94ff-5056-4d0e-9cde-87be3f6d18a4": {
            "x": 1909.25,
            "y": 510.39453125,
            "connections": {
              "PATCHED": "977023cc-65dc-4c80-9306-c777f776c555",
              "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "nodeType": "PatchObjectNode",
            "displayName": "Store New Password"
          }
        },
        "staticNodes": {
          "startNode": {
            "x": 0,
            "y": 464
          },
          "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
            "x": 2658,
            "y": 456
          },
          "e301438c-0bd0-429c-ab0c-66126501069a": {
            "x": 1845,
            "y": 923
          }
        },
        "description": "An example journey showcasing how you can enforce dynamic password policies at authentication",
        "mustRun": false,
        "enabled": true
      },
      "nodes": {
        "20214d5c-97ad-4bff-95ad-5f187b168ae4": {
          "_id": "20214d5c-97ad-4bff-95ad-5f187b168ae4",
          "_rev": "189920995",
          "nodes": [
            {
              "_id": "1fa2f10c-9b43-491f-8b0f-e9f8cc6c0226",
              "nodeType": "ValidatedUsernameNode",
              "displayName": "Platform Username"
            },
            {
              "_id": "7d0c4d06-d018-4260-ba67-ef8e647223ae",
              "nodeType": "ValidatedPasswordNode",
              "displayName": "Platform Password"
            }
          ],
          "pageDescription": {
            "en": "New here? <a href=\"#/service/Registration\">Create an account</a><br><a href=\"#/service/ForgottenUsername\">Forgot username?</a><a href=\"#/service/ResetPassword\"> Forgot password?</a>"
          },
          "pageHeader": {
            "en": "Sign In"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "fd7d5df2-8c22-4c41-af8d-712eb7b99859": {
          "_id": "fd7d5df2-8c22-4c41-af8d-712eb7b99859",
          "_rev": "-738604573",
          "lockAction": "LOCK",
          "_type": {
            "_id": "AccountLockoutNode",
            "name": "Account Lockout",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "06d6cdd6-8feb-40ff-8a26-e04d885b92af": {
          "_id": "06d6cdd6-8feb-40ff-8a26-e04d885b92af",
          "_rev": "-317860298",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 5,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "f3613eef-7826-4dc4-8ba2-63b34ffc71bc": {
          "_id": "f3613eef-7826-4dc4-8ba2-63b34ffc71bc",
          "_rev": "-1385529719",
          "useUniversalIdForUsername": false,
          "minimumPasswordLength": 8,
          "mixedCaseForPasswordChangeMessages": false,
          "_type": {
            "_id": "IdentityStoreDecisionNode",
            "name": "Identity Store Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "TRUE",
              "displayName": "True"
            },
            {
              "id": "FALSE",
              "displayName": "False"
            },
            {
              "id": "LOCKED",
              "displayName": "Locked"
            },
            {
              "id": "CANCELLED",
              "displayName": "Cancelled"
            },
            {
              "id": "EXPIRED",
              "displayName": "Expired"
            }
          ]
        },
        "977023cc-65dc-4c80-9306-c777f776c555": {
          "_id": "977023cc-65dc-4c80-9306-c777f776c555",
          "_rev": "1059263466",
          "identityAttribute": "userName",
          "_type": {
            "_id": "IncrementLoginCountNode",
            "name": "Increment Login Count",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "cb9fae34-4351-468d-84f3-b268227648c5": {
          "_id": "cb9fae34-4351-468d-84f3-b268227648c5",
          "_rev": "2055487251",
          "tree": "ProgressiveProfile",
          "_type": {
            "_id": "InnerTreeEvaluatorNode",
            "name": "Inner Tree Evaluator",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "a69aee96-97d5-4ace-babf-244f19e7c7e2": {
          "_id": "a69aee96-97d5-4ace-babf-244f19e7c7e2",
          "_rev": "1666532691",
          "script": "bcc8160f-cba7-4e00-9b68-88c192a703e5",
          "outcomes": [
            "Found",
            "Missing",
            "Error"
          ],
          "outputs": [
            "*"
          ],
          "inputs": [
            "*"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Found",
              "displayName": "Found"
            },
            {
              "id": "Missing",
              "displayName": "Missing"
            },
            {
              "id": "Error",
              "displayName": "Error"
            }
          ]
        },
        "bfa2e7b5-7ea6-4941-9113-9b7fc0a5b698": {
          "_id": "bfa2e7b5-7ea6-4941-9113-9b7fc0a5b698",
          "_rev": "393221195",
          "script": "40403a48-10a9-4016-b43a-0bbe19a55f58",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "*"
          ],
          "inputs": [
            "*"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "4d4a4382-b36f-48c0-98cf-fee3150d92d1": {
          "_id": "4d4a4382-b36f-48c0-98cf-fee3150d92d1",
          "_rev": "-1976981211",
          "script": "74683312-86a9-48c8-b085-513a681fdeaa",
          "outcomes": [
            "Success",
            "Error"
          ],
          "outputs": [
            "*"
          ],
          "inputs": [
            "*"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Success",
              "displayName": "Success"
            },
            {
              "id": "Error",
              "displayName": "Error"
            }
          ]
        },
        "b461af63-48f7-42f7-ad51-3ff86f6b56a9": {
          "_id": "b461af63-48f7-42f7-ad51-3ff86f6b56a9",
          "_rev": "1825919679",
          "script": "4a34274e-d78a-4096-bc91-05f4304d2c9c",
          "outcomes": [
            "Valid",
            "Invalid",
            "Undefined",
            "Error"
          ],
          "outputs": [
            "*"
          ],
          "inputs": [
            "*"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Valid",
              "displayName": "Valid"
            },
            {
              "id": "Invalid",
              "displayName": "Invalid"
            },
            {
              "id": "Undefined",
              "displayName": "Undefined"
            },
            {
              "id": "Error",
              "displayName": "Error"
            }
          ]
        },
        "c2a0d85f-7043-4531-ad0a-92f30fdac521": {
          "_id": "c2a0d85f-7043-4531-ad0a-92f30fdac521",
          "_rev": "-1067162285",
          "nodes": [
            {
              "_id": "2f64ee8d-c730-429d-a520-03c8a3d4bf54",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Enforce Password Policy"
            }
          ],
          "pageDescription": {
            "en": "Your password doesn't meet the policy requirements set by your organization. Please update your password to continue."
          },
          "stage": "{\"pageFooter\":{\"en\":\"Password Policy Requirements:\"}}",
          "pageHeader": {
            "en": "Password Policy Evaluation Failed"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Valid",
              "displayName": "Valid"
            },
            {
              "id": "Invalid",
              "displayName": "Invalid"
            },
            {
              "id": "Undefined",
              "displayName": "Undefined"
            },
            {
              "id": "Error",
              "displayName": "Error"
            }
          ]
        },
        "a00f94ff-5056-4d0e-9cde-87be3f6d18a4": {
          "_id": "a00f94ff-5056-4d0e-9cde-87be3f6d18a4",
          "_rev": "-1196850335",
          "identityResource": "managed/alpha_user",
          "patchAsObject": false,
          "ignoredFields": [],
          "identityAttribute": "userName",
          "_type": {
            "_id": "PatchObjectNode",
            "name": "Patch Object",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "PATCHED",
              "displayName": "Patched"
            },
            {
              "id": "FAILURE",
              "displayName": "Failed"
            }
          ]
        }
      },
      "innerNodes": {
        "1fa2f10c-9b43-491f-8b0f-e9f8cc6c0226": {
          "_id": "1fa2f10c-9b43-491f-8b0f-e9f8cc6c0226",
          "_rev": "-2083344423",
          "usernameAttribute": "userName",
          "validateInput": false,
          "_type": {
            "_id": "ValidatedUsernameNode",
            "name": "Platform Username",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "7d0c4d06-d018-4260-ba67-ef8e647223ae": {
          "_id": "7d0c4d06-d018-4260-ba67-ef8e647223ae",
          "_rev": "463604941",
          "passwordAttribute": "password",
          "validateInput": false,
          "_type": {
            "_id": "ValidatedPasswordNode",
            "name": "Platform Password",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "2f64ee8d-c730-429d-a520-03c8a3d4bf54": {
          "_id": "2f64ee8d-c730-429d-a520-03c8a3d4bf54",
          "_rev": "-332479750",
          "script": "1f4bfdf2-1f61-4d4d-90e2-1cd6084f0e78",
          "outcomes": [
            "Valid",
            "Invalid",
            "Undefined",
            "Error"
          ],
          "outputs": [
            "*"
          ],
          "inputs": [
            "*"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Valid",
              "displayName": "Valid"
            },
            {
              "id": "Invalid",
              "displayName": "Invalid"
            },
            {
              "id": "Undefined",
              "displayName": "Undefined"
            },
            {
              "id": "Error",
              "displayName": "Error"
            }
          ]
        }
      },
      "scripts": {
        "bcc8160f-cba7-4e00-9b68-88c192a703e5": {
          "_id": "bcc8160f-cba7-4e00-9b68-88c192a703e5",
          "name": "Get Org ID by Query Parameter",
          "description": null,
          "script": "\"/*\\n Capture the URL Query Param specified\\n \\n This script does not need to be parametrized. It will work properly as is.\\n \\n The scripted decision node needs the following outcomes defined:\\n - Found\\n - Missing\\n - Error\\n \\n Author: @gwizdala\\n */\\n//// CONSTANTS\\n// Change the query parameter below if you want to gather a different value.\\n// Ideally, this sort of functionality could be handled in a library script.\\nvar QUERY_PARAM = \\\"orgId\\\";\\nvar SHARED_STATE_KEY = \\\"orgId\\\";\\n// Request Params\\nvar HOST = requestHeaders.get(\\\"host\\\").get(0); // e.g. openam-example.forgeblocks.com\\n\\nvar NodeOutcome = {\\n    FOUND: \\\"Found\\\",\\n    MISSING: \\\"Missing\\\",\\n    ERROR: \\\"Error\\\"\\n};\\n\\n//// MAIN\\n(function () {\\n    try {  \\n      // Gather the Query Parameter & pass into shared state\\n      if (requestParameters.get(QUERY_PARAM)) {\\n        nodeState.putShared(SHARED_STATE_KEY, decodeURI(requestParameters.get(QUERY_PARAM).get(0)));\\n        outcome = NodeOutcome.FOUND;\\n      } else {\\n\\t\\toutcome = NodeOutcome.MISSING;\\n      }\\n    } catch (e) {\\n        logger.error(e);\\n        outcome = NodeOutcome.ERROR;\\n    }\\n    \\n    action.goTo(outcome);\\n}());\\n\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "id=ffbd8af2-73a2-43c7-8f26-6efe7b80d395,ou=user,ou=am-config",
          "creationDate": 1741617551310,
          "lastModifiedBy": "id=ffbd8af2-73a2-43c7-8f26-6efe7b80d395,ou=user,ou=am-config",
          "lastModifiedDate": 1741617551310,
          "evaluatorVersion": "2.0"
        },
        "40403a48-10a9-4016-b43a-0bbe19a55f58": {
          "_id": "40403a48-10a9-4016-b43a-0bbe19a55f58",
          "name": "Load Password Policy",
          "description": "Loads in a password policy to be evaluated within the Journey.",
          "script": "\"/*\\n  Loads in a password policy to be evaluated within the Journey.\\n\\n  This example uses a testing password policy, but you could just as easily pass this policy as the result of:\\n  \\n  - An HTTP request to an external PDP (like the Policy Engine or PingOneAuthorize)\\n  - Retrieved Data on the User, Group, Organization, or other Managed Object\\n  - Information from an external IdP (such as inside an Assertion)\\n  - Results of a branching Journey path (e.g. requiring stricter policies to access particular resources)\\n \\n The scripted decision node needs the following outcomes defined:\\n - true\\n \\n Author: @gwizdala\\n\\n */\\nvar passwordPolicy = {\\n    minPasswordLength: 8,\\n    maxPasswordLength: 10,\\n    disallowedUserAttributes: ['userName', 'givenName', 'sn', 'mail'],\\n    disallowedOrgAttributes: ['name'],\\n    requireNoCommonlyUsedPasswords: true,\\n    requireUpperCase: true,\\n    requireLowerCase: true,\\n    requireNumber: true,\\n    requireSpecialChar: true,\\n    requireNoRepeatChars: true\\n};\\n\\nnodeState.putShared(\\\"passwordPolicy\\\", passwordPolicy);\\n\\noutcome = \\\"true\\\";\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "id=ffbd8af2-73a2-43c7-8f26-6efe7b80d395,ou=user,ou=am-config",
          "creationDate": 1741274669456,
          "lastModifiedBy": "id=ffbd8af2-73a2-43c7-8f26-6efe7b80d395,ou=user,ou=am-config",
          "lastModifiedDate": 1741278778499,
          "evaluatorVersion": "2.0"
        },
        "74683312-86a9-48c8-b085-513a681fdeaa": {
          "_id": "74683312-86a9-48c8-b085-513a681fdeaa",
          "name": "Get Password Policy From Organization Metadata",
          "description": null,
          "script": "\"/*\\nUtilizing the organization ID provided gather the password policy information.\\n\\nThis script does not need to be parametrized. It will work properly as is.\\n \\n The scripted decision node needs the following outcomes defined:\\n    - Success\\n    - Error\\n \\n Author: @gwizdala\\n */\\n\\n//// CONSTANTS\\nvar REALM = 'alpha';\\nvar NodeOutcome = {\\n  SUCCESS: \\\"Success\\\",\\n  ERROR: \\\"Error\\\"\\n};\\n\\n//// MAIN\\n(function () {\\n    outcome = NodeOutcome.ERROR;\\n\\n    try {\\n        var orgId = nodeState.get('orgId');\\n\\n        if (null != orgId) {\\n            var queryFilter = `_id eq \\\"${orgId}\\\"`;\\n            var fields = 'name,passwordPolicy';\\n            \\n            var orgMetadata = openidm.query(`managed/${REALM}_organization`, { \\n              \\\"_queryFilter\\\": queryFilter,\\n              \\\"_fields\\\": fields\\n            }).result;\\n  \\n            if (null != orgMetadata && orgMetadata.length === 1) {\\n                var orgMetadataJson = JSON.parse(orgMetadata[0]);\\n                var passwordPolicy = orgMetadataJson.passwordPolicy;\\n                nodeState.putShared('passwordPolicy', passwordPolicy);\\n                outcome = NodeOutcome.SUCCESS;\\n            } else {\\n                throw('No Organization metadata found.');\\n            }\\n        } else {\\n            throw('No Organization ID found in shared state');\\n        }\\n    } catch(e) {\\n        logger.error(e);\\n        outcome = NodeOutcome.ERROR;\\n    }\\n\\n    action.goTo(outcome);\\n}());\\n\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "id=ffbd8af2-73a2-43c7-8f26-6efe7b80d395,ou=user,ou=am-config",
          "creationDate": 1741617932745,
          "lastModifiedBy": "id=ffbd8af2-73a2-43c7-8f26-6efe7b80d395,ou=user,ou=am-config",
          "lastModifiedDate": 1741619955974,
          "evaluatorVersion": "2.0"
        },
        "4a34274e-d78a-4096-bc91-05f4304d2c9c": {
          "_id": "4a34274e-d78a-4096-bc91-05f4304d2c9c",
          "name": "Evaluate Password Policy From State",
          "description": "Evaluates an inputted password based on a dynamic policy configuration.",
          "script": "\"/*\\n  Evaluate inputted password based on a dynamic policy configuration\\n\\n  This scripted decision node expects the following library scripts defined:\\n  - library_passwordPolicy\\n\\n  This scripted decision node expects a user, their password, and a password policy stored in state.\\n \\n The scripted decision node needs the following outcomes defined:\\n - Valid       // The user's password meets the requirements in the password policy\\n - Invalid     // The user's password does not meet the requirements in the password policy\\n - Undefined   // Either the user's uid, password, or password policy was not provided\\n - Error\\n \\n Author: @gwizdala\\n\\n */\\n\\n//// IMPORTS\\nvar libraryPasswordPolicy = require('library_passwordPolicy');\\n\\n//// CONSTANTS\\nvar SCRIPT_NAME = \\\"EvaluatePasswordPolicyFromState\\\";\\nvar NodeOutcome = {\\n  VALID_PASSWORD: \\\"Valid\\\",\\n  INVALID_PASSWORD: \\\"Invalid\\\",\\n  UNDEFINED: \\\"Undefined\\\",\\n  ERROR: \\\"Error\\\"\\n};\\n\\n//// MAIN\\n(function () {\\n    // Default Outcome\\n    outcome = NodeOutcome.INVALID_PASSWORD;\\n    \\n    try {\\n        var password = nodeState.get('password');\\n        var uid = nodeState.get('_id');\\n        var orgId = nodeState.get('orgId');\\n        var objectAttributesRaw = nodeState.getObject(\\\"objectAttributes\\\");\\n        var objectAttributes = objectAttributesRaw ? JSON.parse(objectAttributesRaw) : null;\\n        var userContext = {\\n            uid: uid,\\n            orgId: orgId,\\n            objectAttributes: objectAttributes\\n        };\\n        \\n        var passwordPolicy = nodeState.get(\\\"passwordPolicy\\\");\\n        // Example config - useful for testing\\n        // var passwordPolicy = {\\n        //     minPasswordLength: 8,\\n        //     maxPasswordLength: 10,\\n        //     disallowedUserAttributes: ['userName', 'givenName', 'sn', 'mail'],\\n        //     disallowedOrgAttributes: ['name'],\\n        //     requireNoCommonlyUsedPasswords: true,\\n        //     requireUpperCase: true,\\n        //     requireLowerCase: true,\\n        //     requireNumber: true,\\n        //     requireSpecialChar: true,\\n        //     requireNoRepeatChars: true\\n        // };\\n        \\n        if (password && passwordPolicy) {\\n            var result = libraryPasswordPolicy.evaluatePassword(this, passwordPolicy, password, userContext);\\n\\n            if (result.valid) {\\n                outcome = NodeOutcome.VALID_PASSWORD;\\n            } else {\\n                nodeState.putShared(\\\"passwordEvaluationResult\\\", JSON.stringify(result.evaluation));\\n                outcome = NodeOutcome.INVALID_PASSWORD\\n            }\\n        } else {\\n            outcome = NodeOutcome.UNDEFINED;\\n        }\\n      \\n    } catch(e) {\\n      logger.error(`Password policy evaluation failed: \\\"${e}\\\"`);\\n      outcome = NodeOutcome.ERROR;\\n    }\\n\\n    action.goTo(outcome);\\n}());\\n\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "id=ffbd8af2-73a2-43c7-8f26-6efe7b80d395,ou=user,ou=am-config",
          "creationDate": 1741213892007,
          "lastModifiedBy": "id=ffbd8af2-73a2-43c7-8f26-6efe7b80d395,ou=user,ou=am-config",
          "lastModifiedDate": 1741284780795,
          "evaluatorVersion": "2.0"
        },
        "1f4bfdf2-1f61-4d4d-90e2-1cd6084f0e78": {
          "_id": "1f4bfdf2-1f61-4d4d-90e2-1cd6084f0e78",
          "name": "Enforce Password Policy on Input",
          "description": "Enforces password policy on the front-end during password entry. Used when a creating/storing a password. This script should be on a Page Node alongside a password input.",
          "script": "\"/*\\n  Evaluate inputted password based on a dynamic policy configuration\\n\\n  This scripted decision node expects the following library scripts defined:\\n  - library_passwordPolicy\\n\\n  This scripted decision node expects a password policy stored in state.\\n \\n The scripted decision node needs the following outcomes defined:\\n - Valid       // The user's password meets the requirements in the password policy\\n - Invalid     // The user's password does not meet the requirements in the password policy\\n - Undefined   // Either the user's uid, password, or password policy was not provided\\n - Error\\n \\n Author: @gwizdala\\n\\n */\\n\\n//// IMPORTS\\nvar libraryPasswordPolicy = require('library_passwordPolicy');\\n\\n//// CONSTANTS\\nvar SCRIPT_NAME = \\\"EnforcePasswordPolicyOnInput\\\";\\nvar NodeOutcome = {\\n  VALID_PASSWORD: \\\"Valid\\\",\\n  INVALID_PASSWORD: \\\"Invalid\\\",\\n  UNDEFINED: \\\"Undefined\\\",\\n  ERROR: \\\"Error\\\"\\n};\\n\\n//// HELPERS\\n// Displays the results of an evaluation within the UI, including what succeeded and what failed.\\n// Since we are evaluating on the back-end with a library script, these actions aren't happening in real-time.\\n// Rather, we are displaying an evaluation result on submit.\\nfunction displayPasswordEvaluationResults(evaluation) {\\n    var css = `\\\\\\n    .policy {\\\\\\n        text-align: left;\\\\\\n        list-style-type: none;\\\\\\n        color: #ec4949;\\\\\\n    }\\\\\\n    .policy li::before {\\\\\\n        content: \\\"\\\\\\\\u274C\\\";\\\\\\n        margin-right: 0.5em;\\\\\\n    }\\\\\\n    .policy--passed {\\\\\\n        color: #3fa13f;\\\\\\n    }\\\\\\n    .policy--passed::before {\\\\\\n        content: \\\"\\\\\\\\u2713\\\"!important;\\\\\\n    }\\\\\\n    `;\\n    var passwordPolicyListID = 'passwordPolicyEvaluationRequirements';\\n    var evaluationScript = `\\\\\\n        document.head.appendChild(document.createElement(\\\"style\\\")).innerHTML = '${css}';\\\\\\n        var passwordList = document.getElementById('${passwordPolicyListID}');\\\\\\n        var footer = document.getElementsByClassName('card-footer')[0];\\\\\\n        var header = document.getElementsByClassName('card-header')[0];\\\\\\n        var body = document.getElementsByClassName('card-body')[0];\\\\\\n\\n        var policies = ${evaluation};\\\\\\n        var policyList = document.createElement('ul');\\\\\\n        policyList.setAttribute('class', 'policy');\\\\\\n        policyList.setAttribute('id', '${passwordPolicyListID}');\\\\\\n        policies.forEach(function(policy) {\\\\\\n            var policyListElement = document.createElement('li');\\\\\\n            if (policy.passed) {\\\\\\n                policyListElement.setAttribute('class', 'policy--passed');\\\\\\n            }\\\\\\n            policyListElement.innerHTML = policy.policy;\\\\\\n            policyList.appendChild(policyListElement);\\\\\\n        });\\\\\\n        \\n        // Append the policy \\\\n\\\\\\n        if (!!passwordList) {\\\\\\n            passwordList.parentNode.removeChild(passwordList);\\\\\\n        }\\\\\\n        \\n        if (!!footer) {\\\\\\n            footer.appendChild(policyList);\\\\\\n        } else if (!!header) {\\\\\\n            header.appendChild(policyList);\\\\\\n        } else if (!!body) {\\\\\\n            body.appendChild(policyList);\\\\\\n        }\\n    `;\\n\\n    return evaluationScript;\\n}\\n\\n//// MAIN\\n(function () {\\n    // Default Outcome\\n    outcome = NodeOutcome.INVALID_PASSWORD;\\n    \\n    try {     \\n        var uid = nodeState.get('_id');\\n        var orgId = nodeState.get('orgId');\\n        var objectAttributesRaw = nodeState.getObject(\\\"objectAttributes\\\");\\n        var objectAttributes = objectAttributesRaw ? JSON.parse(objectAttributesRaw) : null;\\n        var userContext = {\\n            uid: uid,\\n            orgId: orgId,\\n            objectAttributes: objectAttributes\\n        };\\n\\n        // Check if an evaluation already occurred. If so, present the results of the evaluation.\\n        var evaluation = nodeState.get(\\\"passwordEvaluationResult\\\");\\n        \\n        var passwordPolicy = nodeState.get(\\\"passwordPolicy\\\");\\n        // Example config - useful for testing\\n        // var passwordPolicy = {\\n        //     minPasswordLength: 8,\\n        //     maxPasswordLength: 10,\\n        //     disallowedUserAttributes: ['userName', 'givenName', 'sn', 'mail'],\\n        //     disallowedOrgAttributes: ['name'],\\n        //     requireNoCommonlyUsedPasswords: true,\\n        //     requireUpperCase: true,\\n        //     requireLowerCase: true,\\n        //     requireNumber: true,\\n        //     requireSpecialChar: true,\\n        //     requireNoRepeatChars: true\\n        // };\\n\\n        if (passwordPolicy) {\\n            if (!evaluation) {\\n                // gather the evaluation information if no pre-existing evaluation was provided\\n                evaluation = libraryPasswordPolicy.evaluatePassword(this, passwordPolicy, \\\"\\\", userContext).evaluation; // an empty password will always fail unless the password policy is empty.\\n            }\\n                \\n            if (callbacks.isEmpty()) {\\n                callbacksBuilder.passwordCallback(\\\"Password\\\", false);\\n                callbacksBuilder.scriptTextOutputCallback(displayPasswordEvaluationResults(evaluation));\\n            } else {\\n                var password = callbacks.getPasswordCallbacks().get(0);\\n                var result = libraryPasswordPolicy.evaluatePassword(this, passwordPolicy, password, userContext);\\n                \\n                nodeState.putTransient(\\\"password\\\", password);\\n                nodeState.putShared(\\\"passwordEvaluationResult\\\", JSON.stringify(result.evaluation));\\n\\n                if (result.valid) {\\n                    if (!objectAttributes) {\\n                        objectAttributes = {};\\n                    }\\n                    objectAttributes['password'] = password;\\n\\n                    nodeState.putTransient('objectAttributes', objectAttributes);\\n                    outcome = NodeOutcome.VALID_PASSWORD;\\n                } else {\\n                    // Since we can't loop back to the same node, it's suggested to loop back to a previous node and continue from there\\n                    // or to an error message.\\n                    outcome = NodeOutcome.INVALID_PASSWORD\\n                }\\n            }\\n        } else {\\n            outcome = NodeOutcome.UNDEFINED;\\n        }\\n      \\n    } catch(e) {\\n      logger.error(`Password policy enforcement failed: \\\"${e}\\\"`);\\n      outcome = NodeOutcome.ERROR;\\n    }\\n\\n    action.goTo(outcome);\\n}());\\n\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "id=ffbd8af2-73a2-43c7-8f26-6efe7b80d395,ou=user,ou=am-config",
          "creationDate": 1741215054649,
          "lastModifiedBy": "id=ffbd8af2-73a2-43c7-8f26-6efe7b80d395,ou=user,ou=am-config",
          "lastModifiedDate": 1741299440175,
          "evaluatorVersion": "2.0"
        }
      },
      "emailTemplates": {},
      "socialIdentityProviders": {},
      "themes": [],
      "saml2Entities": {},
      "circlesOfTrust": {}
    }
  }
}