{
    "meta": {
      "treesSelectedForExport": [
        "ChangeBrandingByOrg"
      ],
      "innerTreesIncluded": []
    },
    "trees": {
      "ChangeBrandingByOrg": {
        "tree": {
          "_id": "ChangeBrandingByOrg",
          "_rev": "255127891",
          "identityResource": "managed/alpha_user",
          "uiConfig": {
            "categories": "[\"Organizations\",\"Theming\"]"
          },
          "entryNodeId": "05a5f12e-2f84-4a12-8ac1-aa5171dfdf05",
          "innerTreeOnly": false,
          "nodes": {
            "05a5f12e-2f84-4a12-8ac1-aa5171dfdf05": {
              "x": 210,
              "y": 147,
              "connections": {
                "Error": "e301438c-0bd0-429c-ab0c-66126501069a",
                "Found": "de242254-4721-4370-8d48-503ae9cedc68",
                "Missing": "de242254-4721-4370-8d48-503ae9cedc68"
              },
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Get Org ID from Query Param"
            },
            "b6f53a63-7f32-40e7-9c2c-44785b96f7b6": {
              "x": 1004,
              "y": 159.5,
              "connections": {
                "false": "e301438c-0bd0-429c-ab0c-66126501069a",
                "true": "a9109d94-2bb4-4b6e-954a-4c1a5babdf76"
              },
              "nodeType": "DataStoreDecisionNode",
              "displayName": "Data Store Decision"
            },
            "fdc2f4f4-0b1f-4fab-a366-1a30a1bdfec1": {
              "x": 759,
              "y": 80,
              "connections": {
                "Error": "e301438c-0bd0-429c-ab0c-66126501069a",
                "Success": "b6f53a63-7f32-40e7-9c2c-44785b96f7b6"
              },
              "nodeType": "PageNode",
              "displayName": "Page Node"
            },
            "fed31efb-0500-4b04-8053-aa3f86723d83": {
              "x": 1488,
              "y": 159.5,
              "connections": {
                "Success": "5138e920-c20e-45d5-b4db-b2109203c987",
                "Error": "5138e920-c20e-45d5-b4db-b2109203c987"
              },
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Set Email Styling"
            },
            "a9109d94-2bb4-4b6e-954a-4c1a5babdf76": {
              "x": 1241,
              "y": 159.5,
              "connections": {
                "true": "fed31efb-0500-4b04-8053-aa3f86723d83",
                "false": "e301438c-0bd0-429c-ab0c-66126501069a"
              },
              "nodeType": "IdentifyExistingUserNode",
              "displayName": "Identify Existing User"
            },
            "de242254-4721-4370-8d48-503ae9cedc68": {
              "x": 514,
              "y": 159.5,
              "connections": {
                "Success": "fdc2f4f4-0b1f-4fab-a366-1a30a1bdfec1",
                "Error": "fdc2f4f4-0b1f-4fab-a366-1a30a1bdfec1"
              },
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Set Theme Overrides"
            },
            "5138e920-c20e-45d5-b4db-b2109203c987": {
              "x": 1718,
              "y": 159.5,
              "connections": {
                "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
                "CONFIGURATION_FAILED": "e301438c-0bd0-429c-ab0c-66126501069a"
              },
              "nodeType": "ConfigProviderNode",
              "displayName": "Verification Email"
            }
          },
          "staticNodes": {
            "startNode": {
              "x": 70,
              "y": 177
            },
            "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
              "x": 1948,
              "y": 94.66666666666667
            },
            "e301438c-0bd0-429c-ab0c-66126501069a": {
              "x": 1948,
              "y": 237.33333333333334
            }
          },
          "description": "An example journey showcasing how you can dynamically change the theme customization and overrides based on the metadata set on the Organization.",
          "mustRun": false,
          "enabled": true
        },
        "nodes": {
          "05a5f12e-2f84-4a12-8ac1-aa5171dfdf05": {
            "_id": "05a5f12e-2f84-4a12-8ac1-aa5171dfdf05",
            "_rev": "417611454",
            "script": "384e42a0-8ae9-4847-8251-5c7ddd9d033e",
            "outcomes": [
              "Found",
              "Missing",
              "Error"
            ],
            "outputs": [
              "*"
            ],
            "inputs": [
              "*"
            ],
            "_type": {
              "_id": "ScriptedDecisionNode",
              "name": "Scripted Decision",
              "collection": true
            },
            "_outcomes": [
              {
                "id": "Found",
                "displayName": "Found"
              },
              {
                "id": "Missing",
                "displayName": "Missing"
              },
              {
                "id": "Error",
                "displayName": "Error"
              }
            ]
          },
          "b6f53a63-7f32-40e7-9c2c-44785b96f7b6": {
            "_id": "b6f53a63-7f32-40e7-9c2c-44785b96f7b6",
            "_rev": "-268392178",
            "_type": {
              "_id": "DataStoreDecisionNode",
              "name": "Data Store Decision",
              "collection": true
            },
            "_outcomes": [
              {
                "id": "true",
                "displayName": "True"
              },
              {
                "id": "false",
                "displayName": "False"
              }
            ]
          },
          "fdc2f4f4-0b1f-4fab-a366-1a30a1bdfec1": {
            "_id": "fdc2f4f4-0b1f-4fab-a366-1a30a1bdfec1",
            "_rev": "1597910993",
            "nodes": [
              {
                "_id": "a5bd90ae-3a6d-41a3-ae59-97cd2f1ffb20",
                "nodeType": "ValidatedUsernameNode",
                "displayName": "Platform Username"
              },
              {
                "_id": "72e8d998-07bc-4711-988f-7dedfe30320a",
                "nodeType": "ValidatedPasswordNode",
                "displayName": "Platform Password"
              },
              {
                "_id": "f6ea0e02-3764-4575-993e-611e6ca61751",
                "nodeType": "ScriptedDecisionNode",
                "displayName": "Set Theme Styling"
              }
            ],
            "pageDescription": {
              "en": "Log in to continue."
            },
            "pageHeader": {
              "en": "Welcome"
            },
            "_type": {
              "_id": "PageNode",
              "name": "Page Node",
              "collection": true
            },
            "_outcomes": [
              {
                "id": "Success",
                "displayName": "Success"
              },
              {
                "id": "Error",
                "displayName": "Error"
              }
            ]
          },
          "fed31efb-0500-4b04-8053-aa3f86723d83": {
            "_id": "fed31efb-0500-4b04-8053-aa3f86723d83",
            "_rev": "-1605522531",
            "script": "bd84d377-835e-4f69-85e1-9073c0d8a83f",
            "outcomes": [
              "Success",
              "Error"
            ],
            "outputs": [
              "*"
            ],
            "inputs": [
              "*"
            ],
            "_type": {
              "_id": "ScriptedDecisionNode",
              "name": "Scripted Decision",
              "collection": true
            },
            "_outcomes": [
              {
                "id": "Success",
                "displayName": "Success"
              },
              {
                "id": "Error",
                "displayName": "Error"
              }
            ]
          },
          "a9109d94-2bb4-4b6e-954a-4c1a5babdf76": {
            "_id": "a9109d94-2bb4-4b6e-954a-4c1a5babdf76",
            "_rev": "1371639510",
            "identityAttribute": "userName",
            "identifier": "mail",
            "_type": {
              "_id": "IdentifyExistingUserNode",
              "name": "Identify Existing User",
              "collection": true
            },
            "_outcomes": [
              {
                "id": "true",
                "displayName": "True"
              },
              {
                "id": "false",
                "displayName": "False"
              }
            ]
          },
          "de242254-4721-4370-8d48-503ae9cedc68": {
            "_id": "de242254-4721-4370-8d48-503ae9cedc68",
            "_rev": "-1767942986",
            "script": "e68988ee-5e66-417a-89ad-27c94a326547",
            "outcomes": [
              "Success",
              "Error"
            ],
            "outputs": [
              "*"
            ],
            "inputs": [
              "*"
            ],
            "_type": {
              "_id": "ScriptedDecisionNode",
              "name": "Scripted Decision",
              "collection": true
            },
            "_outcomes": [
              {
                "id": "Success",
                "displayName": "Success"
              },
              {
                "id": "Error",
                "displayName": "Error"
              }
            ]
          },
          "5138e920-c20e-45d5-b4db-b2109203c987": {
            "_id": "5138e920-c20e-45d5-b4db-b2109203c987",
            "_rev": "-1900310295",
            "script": "3eaa74c1-a33e-423a-a42d-bf8b6932df7d",
            "scriptInputs": [
              "*"
            ],
            "nodeType": "EmailSuspendNode",
            "_type": {
              "_id": "ConfigProviderNode",
              "name": "Configuration Provider",
              "collection": true
            },
            "_outcomes": [
              {
                "id": "outcome",
                "displayName": "Outcome"
              },
              {
                "id": "CONFIGURATION_FAILED",
                "displayName": "Configuration failure"
              }
            ]
          }
        },
        "innerNodes": {
          "a5bd90ae-3a6d-41a3-ae59-97cd2f1ffb20": {
            "_id": "a5bd90ae-3a6d-41a3-ae59-97cd2f1ffb20",
            "_rev": "1332236040",
            "usernameAttribute": "userName",
            "validateInput": false,
            "_type": {
              "_id": "ValidatedUsernameNode",
              "name": "Platform Username",
              "collection": true
            },
            "_outcomes": [
              {
                "id": "outcome",
                "displayName": "Outcome"
              }
            ]
          },
          "72e8d998-07bc-4711-988f-7dedfe30320a": {
            "_id": "72e8d998-07bc-4711-988f-7dedfe30320a",
            "_rev": "-51711518",
            "passwordAttribute": "password",
            "validateInput": false,
            "_type": {
              "_id": "ValidatedPasswordNode",
              "name": "Platform Password",
              "collection": true
            },
            "_outcomes": [
              {
                "id": "outcome",
                "displayName": "Outcome"
              }
            ]
          },
          "f6ea0e02-3764-4575-993e-611e6ca61751": {
            "_id": "f6ea0e02-3764-4575-993e-611e6ca61751",
            "_rev": "-417624281",
            "script": "9562d68f-915a-466d-b51a-0aac0c2d7d44",
            "outcomes": [
              "Success",
              "Error"
            ],
            "outputs": [
              "*"
            ],
            "inputs": [
              "*"
            ],
            "_type": {
              "_id": "ScriptedDecisionNode",
              "name": "Scripted Decision",
              "collection": true
            },
            "_outcomes": [
              {
                "id": "Success",
                "displayName": "Success"
              },
              {
                "id": "Error",
                "displayName": "Error"
              }
            ]
          }
        },
        "scripts": {
          "384e42a0-8ae9-4847-8251-5c7ddd9d033e": {
            "_id": "384e42a0-8ae9-4847-8251-5c7ddd9d033e",
            "name": "Get Org ID by Query Parameter",
            "description": "Capture the URL Query Param specified (orgId)",
            "script": "\"/*\\n Capture the URL Query Param specified\\n \\n This script does not need to be parametrized. It will work properly as is.\\n \\n The scripted decision node needs the following outcomes defined:\\n - Found\\n - Missing\\n - Error\\n \\n Author: @gwizdala\\n */\\n//// CONSTANTS\\n// Change the query parameter below if you want to gather a different value.\\n// Ideally, this sort of functionality could be handled in a library script.\\nvar QUERY_PARAM = \\\"orgId\\\";\\nvar SHARED_STATE_KEY = \\\"orgId\\\";\\n// Request Params\\nvar HOST = requestHeaders.get(\\\"host\\\").get(0); // e.g. openam-example.forgeblocks.com\\n\\nvar NodeOutcome = {\\n    FOUND: \\\"Found\\\",\\n    MISSING: \\\"Missing\\\",\\n    ERROR: \\\"Error\\\"\\n};\\n\\n//// MAIN\\n(function () {\\n    try {  \\n      // Gather the Query Parameter & pass into shared state\\n      if (requestParameters.get(QUERY_PARAM)) {\\n        nodeState.putShared(SHARED_STATE_KEY, decodeURI(requestParameters.get(QUERY_PARAM).get(0)));\\n        outcome = NodeOutcome.FOUND;\\n      } else {\\n\\t\\toutcome = NodeOutcome.MISSING;\\n      }\\n    } catch (e) {\\n        logger.error(e);\\n        outcome = NodeOutcome.ERROR;\\n    }\\n    \\n    action.goTo(outcome);\\n}());\\n\"",
            "default": false,
            "language": "JAVASCRIPT",
            "context": "AUTHENTICATION_TREE_DECISION_NODE",
            "createdBy": "id=7dcc118c-8283-4730-984b-b12327ad1744,ou=user,ou=am-config",
            "creationDate": 1731105769566,
            "lastModifiedBy": "id=7dcc118c-8283-4730-984b-b12327ad1744,ou=user,ou=am-config",
            "lastModifiedDate": 1731444681942,
            "evaluatorVersion": "2.0"
          },
          "bd84d377-835e-4f69-85e1-9073c0d8a83f": {
            "_id": "bd84d377-835e-4f69-85e1-9073c0d8a83f",
            "name": "Set Email Styling by Organization Metadata",
            "description": "Utilizing the organization metadata provided, set the logo and colors of the brand inside emails.",
            "script": "\"/*\\nUtilizing the organization metadata provided, set the logo and colors of the brand inside emails.\\nThis script does not need to be parametrized. It will work properly as is.\\nThis script expects an `_id` or `userName` of an existing user in order to populate the mail field of object attributes\\n \\n The scripted decision node needs the following outcomes defined:\\n    - Success\\n    - Error\\n \\n Author: @gwizdala\\n */\\n\\n//// CONSTANTS\\nvar REALM = 'alpha';\\nvar NodeOutcome = {\\n  SUCCESS: \\\"Success\\\",\\n  ERROR: \\\"Error\\\"\\n};\\n\\n//// MAIN\\n(function () {\\n    outcome = NodeOutcome.SUCCESS;\\n\\n    try {\\n        var logoUrl = \\\"\\\";\\n        var name = \\\"\\\";\\n        var backgroundColorHex = \\\"\\\";\\n        var primaryColorHex = \\\"\\\";\\n\\n        var orgId = nodeState.get('orgId');\\n        var objectAttributes = nodeState.get(\\\"objectAttributes\\\");\\n\\n        // If there's no object attributes we should create an object to fill\\n        if (null == objectAttributes) {\\n            objectAttributes = {};\\n        }\\n\\n        // Make sure we are not passing password into shared state\\n        if (!!objectAttributes.password) {\\n            delete objectAttributes.password;\\n        }\\n\\n        if (null != orgId) {\\n            var queryFilter = `_id eq \\\"${orgId}\\\"`;\\n            var fields = 'name,themeCustomization';\\n            \\n            var orgMetadata = openidm.query(`managed/${REALM}_organization`, { \\n              \\\"_queryFilter\\\": queryFilter,\\n              \\\"_fields\\\": fields\\n            }).result;\\n  \\n            if (null != orgMetadata && orgMetadata.length === 1) {\\n                var orgMetadataJson = JSON.parse(orgMetadata)[0];\\n                name = orgMetadataJson.name;\\n                var customization = orgMetadataJson.themeCustomization;\\n                if (customization != null) {\\n                    logoUrl = customization.logoUrl != null ? customization.logoUrl : '';\\n                    backgroundColorHex = customization.backgroundColorHex ? customization.backgroundColorHex : \\\"\\\";\\n                    primaryColorHex = customization.primaryColorHex ? customization.primaryColorHex : \\\"\\\";\\n                    objectAttributes[\\\"orgLogoUrl\\\"] = logoUrl;\\n                    objectAttributes[\\\"backgroundColorHex\\\"] = backgroundColorHex;\\n                    objectAttributes[\\\"primaryColorHex\\\"] = primaryColorHex;\\n                }\\n            }\\n\\n            objectAttributes[\\\"orgName\\\"] = name;\\n            nodeState.mergeShared({\\\"objectAttributes\\\": objectAttributes});\\n        }\\n    } catch(e) {\\n        logger.error(e);\\n        outcome = NodeOutcome.ERROR;\\n    }\\n\\n    action.goTo(outcome);\\n}());\\n\"",
            "default": false,
            "language": "JAVASCRIPT",
            "context": "AUTHENTICATION_TREE_DECISION_NODE",
            "createdBy": "id=7dcc118c-8283-4730-984b-b12327ad1744,ou=user,ou=am-config",
            "creationDate": 1731707740927,
            "lastModifiedBy": "id=7dcc118c-8283-4730-984b-b12327ad1744,ou=user,ou=am-config",
            "lastModifiedDate": 1731712426417,
            "evaluatorVersion": "2.0"
          },
          "e68988ee-5e66-417a-89ad-27c94a326547": {
            "_id": "e68988ee-5e66-417a-89ad-27c94a326547",
            "name": "Set Global Theme Overrides By Organization Metadata",
            "description": "Utilizing the organization metadata provided, set the hosted page and email theme overrides, defaulting to the 'global' themes",
            "script": "\"/*\\nUtilizing the organization metadata provided, set the hosted page and email theme.\\nThis script does not need to be parametrized. It will work properly as is.\\n \\n The scripted decision node needs the following outcomes defined:\\n    - Success\\n    - Error\\n \\n Author: @gwizdala\\n */\\n\\n//// CONSTANTS\\nvar REALM = \\\"alpha\\\";\\nvar NodeOutcome = {\\n  SUCCESS: \\\"Success\\\",\\n  ERROR: \\\"Error\\\"\\n};\\n\\n//// DEFAULTS\\nvar HOSTED_CONFIG = 'Global';\\n// Email Configurations. These are pulled from themeOverrides -> \\\"email\\\" + {name of config}\\nvar EMAIL_CONFIGS = {\\n    Verification: { // Re-verifying an account after X days inactivity\\n        emailSuspendMessage: { // the localizable message shown to your users in your Journey\\n            en: \\\"An email has been sent to the address on file. Click the link in that email to verify your account.\\\"\\n        },\\n        emailTemplateName: \\\"globalRegistration\\\", // The default email template that will be sent\\n        identityAttribute: \\\"userName\\\",\\n        emailAttribute: \\\"mail\\\"\\n    }\\n};\\n\\n\\n//// MAIN\\n(function () {\\n  var callingFunction = \\\"main\\\";\\n  outcome = NodeOutcome.SUCCESS;\\n\\n  try {\\n    var orgId = nodeState.get('orgId');\\n\\n    if (null != orgId) {\\n        var queryFilter = `_id eq \\\"${orgId}\\\"`;\\n        var fields = 'themeOverrides';\\n        \\n        var orgMetadata = openidm.query(`managed/${REALM}_organization`, { \\n          \\\"_queryFilter\\\": queryFilter,\\n          \\\"_fields\\\": fields\\n        }).result;\\n      \\n        if (null != orgMetadata && orgMetadata.length === 1) {\\n            var orgMetadataJson = JSON.parse(orgMetadata)[0];\\n            var themeOverrides = orgMetadataJson.themeOverrides;\\n            \\n            // Get theme data\\n            if (null != themeOverrides && null != themeOverrides.themeName) {\\n                HOSTED_CONFIG = themeOverrides.themeName;\\n            }\\n\\n            // Update email configs from Identity Object\\n            Object.keys(EMAIL_CONFIGS).forEach(function(emailConfigKey) {\\n                var emailConfig = EMAIL_CONFIGS[emailConfigKey];\\n                var emailTemplateName = (!!themeOverrides && themeOverrides[`email${emailConfigKey}`]) ? themeOverrides[`email${emailConfigKey}`] : null;\\n                if (emailTemplateName) {\\n                    emailConfig.emailTemplateName = emailTemplateName;\\n                    EMAIL_CONFIGS[emailConfigKey] = emailConfig;\\n                }\\n            });\\n        }   \\n    }\\n\\n    // Set Email Configs in Shared State\\n    Object.keys(EMAIL_CONFIGS).forEach(function(emailConfigKey) {\\n        var emailConfig = EMAIL_CONFIGS[emailConfigKey];\\n        nodeState.putShared(`email${emailConfigKey}Config`, emailConfig);\\n    });\\n\\n    // Set Theme\\n    if (HOSTED_CONFIG && callbacks.isEmpty()) {\\n        var stage = \\\"themeId=\\\"+encodeURI(HOSTED_CONFIG);\\n        callbacksBuilder.pollingWaitCallback(\\\"100\\\", \\\"Please wait ...\\\");\\n        action.goTo(outcome).withStage(stage);\\n    } else {\\n        action.goTo(outcome);\\n    }\\n  } catch (e) {\\nlogger.error(e);\\n    \\taction.goTo(NodeOutcome.ERROR);\\n  }\\n}());\\n\"",
            "default": false,
            "language": "JAVASCRIPT",
            "context": "AUTHENTICATION_TREE_DECISION_NODE",
            "createdBy": "id=7dcc118c-8283-4730-984b-b12327ad1744,ou=user,ou=am-config",
            "creationDate": 1731714799224,
            "lastModifiedBy": "id=7dcc118c-8283-4730-984b-b12327ad1744,ou=user,ou=am-config",
            "lastModifiedDate": 1731714829145,
            "evaluatorVersion": "2.0"
          },
          "3eaa74c1-a33e-423a-a42d-bf8b6932df7d": {
            "_id": "3eaa74c1-a33e-423a-a42d-bf8b6932df7d",
            "name": "Branded Verification Email",
            "description": null,
            "script": "\"config = nodeState.get(\\\"emailVerificationConfig\\\").asMap();\"",
            "default": false,
            "language": "JAVASCRIPT",
            "context": "CONFIG_PROVIDER_NODE",
            "createdBy": "id=7dcc118c-8283-4730-984b-b12327ad1744,ou=user,ou=am-config",
            "creationDate": 1731446975294,
            "lastModifiedBy": "id=7dcc118c-8283-4730-984b-b12327ad1744,ou=user,ou=am-config",
            "lastModifiedDate": 1731446975294,
            "evaluatorVersion": "1.0"
          },
          "9562d68f-915a-466d-b51a-0aac0c2d7d44": {
            "_id": "9562d68f-915a-466d-b51a-0aac0c2d7d44",
            "name": "Set Hosted Page Styling by Organization Metadata",
            "description": "Utilizing the organization metadata provided, set the logo and colors of the brand on the page.",
            "script": "\"/*\\nUtilizing the organization metadata provided, set the logo and colors of the brand on the page.\\nThis script does not need to be parametrized. It will work properly as is.\\n \\n The scripted decision node needs the following outcomes defined:\\n    - Success\\n    - Error\\n \\n Author: @gwizdala\\n */\\n\\n//// CONSTANTS\\nvar REALM = 'alpha';\\nvar NodeOutcome = {\\n  SUCCESS: \\\"Success\\\",\\n  ERROR: \\\"Error\\\"\\n};\\n\\n//// HELPERS\\n\\nfunction generateUI(name, logoUrl, backgroundColorHex, primaryColorHex) {\\n\\n    var CSS = '';\\n\\n    if (backgroundColorHex) {\\n        CSS += `\\\\\\n        .fr-body-image-branded {\\\\\\n          background-color: ${backgroundColorHex}!important;\\\\\\n        }`;\\n    }\\n\\n    if (primaryColorHex) {\\n      CSS += `\\\\\\n        button[id^='brandedButton_'] {\\\\\\n          background-color: ${primaryColorHex}!important;\\\\\\n          border-color: ${primaryColorHex}!important;\\\\\\n        }`;\\n    }\\n    \\n  var html = `\\\\\\n        var logoUrl = \\\"${logoUrl ? logoUrl : ''}\\\";\\\\\\n        var logoName = \\\"${name ? name : 'Partner'} Logo\\\";\\\\\\n        var logoId = \\\"partnerLogo\\\";\\\\\\n        var logoContainer = document.getElementById(\\\"partnerLogoWrapper\\\");\\\\\\n        var preexistingLogo = document.getElementById(logoId);\\\\\\n        var backgroundImages = document.getElementsByClassName(\\\"fr-body-image\\\");\\\\\\n        var buttons = document.getElementsByClassName(\\\"btn-primary\\\");\\\\\\n        \\\\\\n        for (var i = 0; i < backgroundImages.length; i++) {\\\\\\n            var backgroundImage = backgroundImages[i];\\\\\\n            backgroundImage.classList.add('fr-body-image-branded');\\\\\\n        };\\\\\\n        \\\\\\n        for (var j = 0; j < buttons.length; j++) {\\\\\\n            var button = buttons[j];\\\\\\n            button.id = 'brandedButton_'.concat(j);\\\\\\n        };\\\\\\n        \\\\\\n        document.head.appendChild(document.createElement(\\\"style\\\")).innerHTML = \\\"${CSS}\\\";\\\\\\n        \\\\\\n        if (logoUrl != \\\"\\\" && logoContainer != null && preexistingLogo == null) {\\\\\\n            var logo = document.createElement('img');\\\\\\n            logo.id = logoId;\\\\\\n            logo.src = logoUrl;\\\\\\n            logo.alt = logoName;\\\\\\n            logo.classList.add('ping-logo');\\\\\\n            logo.classList.add('mb-4');\\\\\\n            logo.classList.add('mt-2');\\\\\\n            console.log(logo);\\\\\\n            logoContainer.insertBefore(logo, logoContainer.firstChild);\\\\\\n        }\\\\\\n        `;\\n  \\n  return html;\\n}  \\n\\n//// MAIN\\n(function () {\\n    outcome = NodeOutcome.SUCCESS;\\n\\n    try {\\n        var logoUrl = \\\"\\\";\\n        var name = \\\"\\\";\\n        var backgroundColorHex = \\\"\\\";\\n        var primaryColorHex = \\\"\\\";\\n\\n        var orgId = nodeState.get('orgId');\\n\\n        if (null != orgId) {\\n            var queryFilter = `_id eq \\\"${orgId}\\\"`;\\n            var fields = 'name,themeCustomization';\\n            \\n            var orgMetadata = openidm.query(`managed/${REALM}_organization`, { \\n              \\\"_queryFilter\\\": queryFilter,\\n              \\\"_fields\\\": fields\\n            }).result;\\n  \\n            if (null != orgMetadata && orgMetadata.length === 1) {\\n                var orgMetadataJson = JSON.parse(orgMetadata)[0];\\n                name = orgMetadataJson.name;\\n                var customization = orgMetadataJson.themeCustomization;\\n                if (customization != null) {\\n                    logoUrl = customization.logoUrl != null ? customization.logoUrl : '';\\n                    backgroundColorHex = customization.backgroundColorHex ? customization.backgroundColorHex : \\\"\\\";\\n                    primaryColorHex = customization.primaryColorHex ? customization.primaryColorHex : \\\"\\\";\\n                }\\n            }\\n                \\n            if (callbacks.isEmpty()) {\\n                callbacksBuilder.scriptTextOutputCallback(generateUI(name, logoUrl, backgroundColorHex, primaryColorHex));\\n            }\\n        }\\n    } catch(e) {\\n        logger.error(e);\\n        outcome = NodeOutcome.ERROR;\\n    }\\n\\n    action.goTo(outcome);\\n}());\\n\"",
            "default": false,
            "language": "JAVASCRIPT",
            "context": "AUTHENTICATION_TREE_DECISION_NODE",
            "createdBy": "id=7dcc118c-8283-4730-984b-b12327ad1744,ou=user,ou=am-config",
            "creationDate": 1731542393189,
            "lastModifiedBy": "id=7dcc118c-8283-4730-984b-b12327ad1744,ou=user,ou=am-config",
            "lastModifiedDate": 1731710217045,
            "evaluatorVersion": "2.0"
          }
        },
        "emailTemplates": {},
        "socialIdentityProviders": {},
        "themes": [],
        "saml2Entities": {},
        "circlesOfTrust": {}
      }
    }
  }